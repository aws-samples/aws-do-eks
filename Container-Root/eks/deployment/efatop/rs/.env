#!/bin/bash

# Source helper functions
source .fun

# Proxy settings [optional] - set if your network requires a proxy to connect to the Internet
export http_proxy=
export https_proxy=
export no_proxy=localhost

# AWS Settings
export AWS_REGION=$(aws configure get region)
export ACCOUNT=$(aws sts get-caller-identity --query Account --output text)


# Project settings
## Target orchestrator TO=docker|compose|swarm|kubernetes
export TO=docker
## VERBOSE - show verbose output, VERBOSE=true|false
export VERBOSE=true
## DEBUG - turn on script debugging, DEBUG=false|true
export DEBUG=false
## DRY_RUN - do not execute commands, DRY_RUN=false|true
export DRY_RUN=false

# Docker image settings
## BASE_IMAGE - your image will be built FROM this BASE_IMAGE as a starting point
export BASE_IMAGE_PATH=rust:slim-trixie
## MAINTAINER - the user who owns and maintains this image
export MAINTAINER="$(whoami)"
## DESCRIPTION - short description of what your image does
export DESCRIPTION="Generic Depend on Docker Image"
## BUILD - a user-friendly build identifier to distinguish between two images that have the same tag
export BUILD=$(date +%Y%m%d%H%M)
## REGISTRY: [optional] - Docker registry path including trailing "/". Example: registry.company.com/demo/
export REGISTRY=${ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/
if [ -n "${REGISTRY}" ]; then
  if [ "${REGISTRY: -1}" != "/" ]; then
    export REGISTRY="${REGISTRY}/"
  fi
fi
## IMAGE: <required> - Docker image name for this project. Example: myapp
export IMAGE=efatop
## VERSION: [optional] - Version tag for this Docker image. Example: v20180302
#export VERSION=v$(date +%Y%m%d)
export VERSION=latest
export TAG=$(if [ -z "${VERSION}" ]; then echo ""; else echo ":${VERSION}"; fi) 
## BUILD_OPTS: [optional] - arguments for the docker image build command
export BUILD_OPTS="--progress plain --build-arg BUILD=${BUILD} --build-arg BASE_IMAGE_PATH=${BASE_IMAGE_PATH} --build-arg MAINTAINER=\"${MAINTAINER}\" --build-arg DESCRIPTION=\"${DESCRIPTION}\" --build-arg http_proxy=${http_proxy} --build-arg https_proxy=${https_proxy} --build-arg no_proxy=${no_proxy}"

# Target Orchestrator (TO) Settings
## common
### CONTAINER_NAME: [optional] - Name of the Docker container including the --name switch. Example --name myapp
export CONTAINER=${IMAGE}
export CONTAINER_NAME="--name ${CONTAINER}"
### PORT_INTERNAL - port on which the application runs inside the container, if more than one port, define additioal variables here
export PORT_INTERNAL=8080
### PORT_EXTERNAL - port to expose outside the container, if more than one port, defina additional variables here
export PORT_EXTERNAL=80
### VOLUME_PATH_INTERNAL - mount path of volume inside the container
export VOLUME_PATH_INTERNAL=/wd
## VOLUME_PATH_EXTERNAL - external path to mount
export VOLUME_PATH_EXTERNAL=$(pwd)
### ENVSUBST - envsubst cli. ENVSUBST=envsubst | "env > /tmp/myanv && docker run --rm -it --env-file /tmp/myenv -v $(pwd):$(pwd) iankoulski/envsubst sh -c envsubst"
export ENVSUBST=envsubst

## docker
### Port map [optional] - Mapping of external to internal ports including the -p switch. Example -p 80:8080 
#export PORT_MAP="-p ${PORT_EXTERNAL}:${PORT_INTERNAL}"
### Volume map [optional] - Mapping of external to internal paths including the -v switch. Example $(pwd):/wd
export VOL_MAP="-v ${VOLUME_PATH_EXTERNAL}:${VOLUME_PATH_INTERNAL} -v /sys/class/infiniband:/sys/class/infiniband -v /sys/devices:/sys/devices -v /dev/infiniband:/dev/infiniband"
### Network [optional] - Network name including the --net switch. Example --net mynet
export NETWORK=
### RUN_OPTS [optional] - additional options to specify with the run comman. Example -e POSTGRES_DB=dbname
export RUN_OPTS="-e http_proxy=$http_proxy -e https_proxy=$https_proxy -e no_proxy=$no_proxy --privileged"

## compose
### DOCKER_COMPOSE - docker-compose cli, DOCKER_COMPOSE=docker-compose | "docker compose"
export DOCKER_COMPOSE="docker-compose"
### COMPOSE_PROJECT_NAME - prefix for project containers, example COMPOSE_PROJECT_NAME=compose
export COMPOSE_PROJECT_NAME=compose
### COMPOSE_TEMPLATE - compose file template path
export COMPOSE_TEMPLATE=./to/compose/template/docker-compose.yaml
### COMPOSE_FILE - compose file path
export COMPOSE_FILE=./to/compose/app/docker-compose.yaml

## swarm
### SWARM_STACK_NAME - name of the application stack to deploy, similar to COMPOSE_PROJECT_NAME
export SWARM_STACK_NAME=mystack
### SWARM_SERVICE_NAME - a stack may contain many services. The action scripts are executed agains the service name configured here.
export SWARM_SERVICE_NAME=${CONTAINER}

## kubernetes
### KUBECTL - kubectl cli, KUBECTL=kubectl
export KUBECTL=kubectl
### KUBETAIL - kubetail cli, KUBETAIL=kubetail
export KUBETAIL=kubetail
### KUBERNETES_TEMPLATE_PATH - folder containing Kubernetes manifest templates
export KUBERNETES_TEMPLATE_PATH=./to/kubernetes/template
### KUBERNETES_APP_PATH - folder containing Kubernetes manifests
export KUBERNETES_APP_PATH=./to/kubernetes/app
### APP_NAME - name of the appliation to deploy
export APP_NAME=${CONTAINER}
### APP_DNS_NAME - fully qualified domain name for the application
export APP_DNS_NAME=${CONTAINER}.domain.ext
### NAMESPACE - Kubernetes namespace where the app will run
export NAMESPACE=${APP_NAME}
### INSTANCE_TYPE - optional instance type on which application pods should run. To use, uncomment deployment template nodeSelector section.
export INSTANCE_TYPE=c5.2xlarge
